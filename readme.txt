ㅇlibraries

    - conda included libraries
    - openbb
    - pandas_ta : dataframe 이 ohlc 꼴로만 되있으면 알아서 해줌
    - TA-Lib -> pandas_ta 가 일정부분 wrapping 하는 목적으로 같이 설치 / 직접 쓰기 불편함
    - FinanceDataReader : 국내지수, 환율 등 간편하게 load
    - riskfolio : 위험지표 및 포트폴리오 최적화
       * option specific libraries : optionlab
    - cvxpy : convex optimization tool. scipy.optimize 보다 편함

ㅇ 추가 아이디어 -> 테스트 필요

---------------- 부분완료) 저가매수 고가매도 역발상 전략
    ㅁ 고점대비 n% 이상 하락/상승시 진입
    하락시)
    -3% 하락시 델타20/10짜리 근월물 콜레이쇼 / 0.5pt / -0.5pt
    -5% 하락시 델타30/15짜리 근월물 콜레이쇼 / 0.5pt / -1pt
    -3% 하락시 델타30/15짜리 목 위클리 콜데빗 / 프리의 2배 / 프리의 -0.25배
    (-3% 하락시 델타20짜리 목 위클리 콜매수 / 프리의 0.25배  / 프리의 -0.5배 => 데빗보다 손익변동성 커서 꼭 해야하나 싶지만... 손실은 데빗과 동일한데 급반등시 이익 수취 확실)
    상승시)
    -6% 상승시 델타40/20짜리 근월물 풋백스프레드 / 0.5pt / -1pt
    -(5% 상승시 델타30/15짜리 위클리 풋레이쇼 0.5pt / -1pt) -> 근본적으로 풋매도랑 다를바 없어서 급반락 연출시 조지는 게 문제

    ㅁ 정추세방향에서 일부 이탈시 정추세방향으로 매일마다 기계적으로 진입...?


ㅇ) 급락 직후 반등가능성이 더 높을경우 -> 스트랭글이 아닌 "jade lizard" 로 반등장서 이중으로 조지는 일 없게 하는 전략 보완해서 monthly/weekly strangle 테스트
    1) 급락 기준이? : 수익률? / 특정 기술적 지표 과매도권? / what?

ㅇ) 콜이 풋대비 너무 낮을때
    -> 일단 변동성 Skew 차트 만들기 : Skew 정도 기준으로 진입 청산 결정
    -> 풋 2개 매도 + 선물매도로 유사 수익 구조 구축하면서 풋 IV만 harvest
    -> 유사한 전략으로 Reversal 이 있음 (실제 해본 결과 Profile 이랑 상관없이 전적으로 콜풋 Skew 매매였음)

----------------- 완료) 매도전략 손절치고나서 반등포지셔닝 => 저가매수 고가매도로 퉁 치기

ㅇ) 상시 Laddering 해놓는 전략
    - BSH
        - 매도랑 동일월물로 / 델타수준 불문 / 행사가 -30짜리 매도 -35짜리 매수로 / 양매도 1계약당 3계약
        - 헤지목적 외에 아얘 BSH 느낌으로 추가 매매
        - 차월로 넘기는건 당장은 불필요해 보임

    - Zero Cost Butterfly
        ㅁ 구축순서 (위에부터 롱감마 ~ 숏감마 강도 순서)
            1) 안쪽 데빗 스프레드 구축 후(+10/-10/0) -> 방향성 맞는대로 크레딧 스프레드 매수 (0/-10/+10) -> 방향성 무조건 맞춰야 Zero Cost 가능...

            2) 바깥쪽 백스프레드 구축 후 (0/-5/+10) ->방향성 맞는대로 + 변동성 오르는대로 안쪽 레이쇼 스프레드 매수 (+10/-15/0) 
            -> 전적으로 변동성에 달려 있음
            -> 저변동성 국면 한정으로 실시 / 되면 좋고 안되면 Butterfly 그냥 포기
            -> 혹은 풋쪽으로 구축할때 활용

            3) 안쪽 델타중립 레이쇼 구축 후 (+10/-13~-15/0) -> 값싸진 바깥 백스프레드 (0/+7~+5/-10) 매수

            4) 바깥쪽 크레딧 스프레드 구축 후 (0/-10/+10) -> 값싸진 안쪽 데빗 스프레드 매수 (+10/-10) 
            -> 이건 월물 콘돌구조로 운용하면서 한쪽 쏠리면 거긴 개기다가 손절 치고 반대쪽은 확실히 구축

            5) 가운데 있는 매도만 구축 후 (0/-20/0) -> 값싸진 나머지 매수 실시 -> 너무 네이키드 매도... 이미 BSH 하는 마당에 여기까지 숏치면 증거금이 남아나질 않을 듯

        ㅁ 콜 vs 풋 or 둘다?

        ㅁ 적정 행사가 or 델타?

        ㅁ 근월물만 or 차월물까지


    - 112+3/6
        - 외가풋만 -n% 수익에서 청산
        - 전량손절점 : -100%
        - 풋 데빗 스프레드 수익실현 후 하향조정하는 시점

ㅇ) 추가수익원 : 위클리 0DTE 전략 (월/목에 실시)
    5-1) 과열권 크레딧 스프레드 + 50% 익절
    5-2) ?

ㅇ) 변동성 기준 전략

------------------완료) 위클리 + 특정일 진입전략의 경우
    - 월요일물 목요일물에 1/2씩 안분배분해서 진입
    - 어짜피 백테스트 결과와 상관없이 "특정 요일" 이 전략의 퍼포먼스에 영향 주면 안 됨

------------------완료) 네이키드 매도전략 크레딧 스프레드로 대체
    1) 위클리 양매도 : 
    - 동일프리미엄 수량의 콘돌로 대체
    - 목/금/월, 월/화/수에 걸쳐서 진입할때 목/월요일물은 유동성 떨어지므로 여기만 네이키드
    - 청산은 양매도 기준으로...? (양매도 청산하는 시점에 수익 미달되도 같이 청산)
    2) 먼슬리 양매도 :
    - 그냥 양매도로 하되 + 하방헤지 (차차월물 BSH)
    3) 방향성 매도_먼슬리 : 
    - 콜쪽은 동일프리미엄 콜 크레딧 스프레드로 대체
    - 풋쪽은 변동성 수준에 따라서 너무 낮으면 스프레드 / 높으면 깡매도
    4) 방향성 매도_위클리 : 
    - 동일프리미엄 수량의 크레딧 스프레드로 대체
    
------------------완료) BSH : 방법론 정립
    - 적정수량 : 월물 양매도 : 차월물 1계약당 차차월물 3/6개
    - 112 : 112 -> 115 + 6으로 커버
    - 수익실현점 : 헤지수단으로써 수익실현이 목적이기 보다는 피헤지전략 손절시 대부분 같이 청산
    - 손절 : 깡매도만 남은경우 -> 프리미엄 -x2배에 손절
    - (만일 애매하게 폭락하여 만기 직전까지 가만있는 경우) 데스밸리 손절점

-----------------완료) 백스프레드 위클리로 하는것도 테스트 -> incorporated
-----------------완료)감마 짤짤이 계열 (익절 + 손절 조정해가면서) 테스트
                      - 양매수로 테스트 했고 유의미한 전략 있으나, 크게 X
-----------------완료) 위클리로 콜매도 / 풋매도 방향성 매도 테스트 -> incorporated

ㅁ 모듈별 추후 과제

backtest.py

ㅁ 미완

# 가격은 있는데, 애초에 종가가 븅신같이 거래된 케이스 어떻게 조정?-> 2021-02-24일 4월물 392.5 풋옵션. 혼자 5.62에 거래...
    -> 기본적으로 주어진 종가가 그 가격이라는 가정 하에 할 수밖에 없다는 생각
# 복리로 투자했으면 어떻게 됬을지? 누적수익률 구하는 함수
# 병렬처리 코드로 바꾸기 : concurrent.futures / multithreading / asyncio

ㅁ 완료
    # dist_from_atm 을 atm 대비 벌어진 값으로 설정되게 -> 완료 V
    # dist_from_atm 을 atm 대비 벌어진 수준(%) 구해서 알아서 설정되게 -> 완료 V
    # dist_from_atm 을 해당 시점 델타 기준으로 알아서 설정되게 (델타 20/15 -> 행사가 알아서 선정)
    #---> 위에 세개 전부 혼용 가능하도록 (
    # (진입시 "0.04%에 긋고 / +7.5 행사 위에다가 매도 후 / 델타 0.05짜리로 외가헤지" 와 같은 전략 구현)
    # 내가옵션 일정 수준 이상 내가격 가면 거래안되서 0원으로 가격 비는거 처리
    # V 일일히 bsm 으로 계산하기 -> 없는 IV interpolate + extrapolate 은 그냥 fillna 로 제일 마지막 iv랑 동일
    # 진입 /청산시점의 변수화 : 현재 월요일 투자 고정 -> 특정일 list 별로 진입하는걸로 수정 (각종 TA 등등 별도로 날짜 추출)
    # 특정 전략 내에서도 leg 별로 익절 손절 따로 구현될수 있게 (래더스프레드 외가익절 / 크레딧스프레드 따로 두기 등)
    => 이건 그냥 전략을 두개로 쪼개서 접근
    (111의 경우 크레딧 스프레드로 백테스트 한번 + 네이키드 풋으로 백테스트 한번 해서 손익 합산)
    # 캘린더라이즈
    # 매매 통계 내기
    1) 총 매매 횟수
    2) 매매 승률
    3) 평균 이익
    4) 평균 손실
    5) 손익비 (금액/금액)
    6) 샤프
    # stop 구현
     1) 별도 조건으로 외부에서 정의해놓은 stop timetable에 stop (기술적 지표 등등) -> 구현
     2) DTE 기반의 stop (DTE n에서 자동 stop)
    # number_of_contracts 도 sizing 구현 : vix지수 수준에 따른 sizing : 한 trade size : 0 ~ 3까지?...
        # 현실적으로 매 signal 마다 포지션 들어가는데 그것가지 sizing 하는건 증거금 관리에 어긋남...
        # 한 주에 해야 할 수량 정하고 signal 마다 나누어서 진입 -> 0 ~ 5(max)
    # 병렬처리 코드로 바꾸기 : concurrent.futures / multithreading / asyncio



option_calc.py

ㅁ 스큐 / 텀 구하는 식 수정하기